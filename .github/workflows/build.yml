# SPDX-FileCopyrightText: 2024-2025 Soulfind Contributors
# SPDX-License-Identifier: GPL-3.0-or-later

name: Build
on: [push, pull_request, workflow_dispatch]
permissions: {}

jobs:
  build:
    timeout-minutes: 15
    strategy:
      matrix:
        os: [linux-x86_64, linux-arm64, macos-x86_64, macos-arm64, windows-x86_64, windows-arm64]
        compiler: [ldc, dmd, gdc]
        include:
          - config: default

          - compiler: ldc
            package: ldc

          - compiler: dmd
            package: dmd

          - compiler: gdc
            package: gcc-gdc

          - os: linux-x86_64
            image: ubuntu-latest
            container: alpine:edge
            config: static

          - os: linux-x86_64
            compiler: dmd
            config: default

          - os: linux-arm64
            image: ubuntu-24.04-arm
            container: alpine:edge
            config: static

          - os: macos-x86_64
            image: macos-13
            target: 10.12

          - os: macos-arm64
            image: macos-latest
            target: 11

          - os: windows-x86_64
            image: windows-latest

          - os: windows-arm64
            image: windows-latest

        exclude:
          - os: linux-arm64
            compiler: dmd

          - os: macos-x86_64
            compiler: gdc

          - os: macos-arm64
            compiler: dmd

          - os: macos-arm64
            compiler: gdc

          - os: windows-x86_64
            compiler: gdc

          - os: windows-arm64
            compiler: dmd

          - os: windows-arm64
            compiler: gdc
    runs-on: ${{ matrix.image }}
    container: ${{ matrix.container }}
    env:
      MACOSX_DEPLOYMENT_TARGET: ${{ matrix.target }}
    steps:
      # Workaround from https://github.com/actions/runner/issues/801#issuecomment-2394392502
      - name: Patch native Alpine NodeJS into Runner environment
        if: matrix.os == 'linux-arm64'
        run: |
          apk upgrade
          apk add docker nodejs
          sed -i "s:ID=alpine:ID=NotpineForGHA:" /etc/os-release
          docker run --rm -v /:/host alpine sh -c 'cd /host/home/runner/actions-runner/*/externals/ && rm -rf node20/* && mkdir node20/bin && ln -s /usr/bin/node node20/bin/node'
        shell: sh

      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up D (Linux)
        if: runner.os == 'Linux'
        run: apk add ${{ matrix.package }} dub gcc musl-dev sqlite-static

      - name: Set up D (Other)
        if: runner.os != 'Linux'
        uses: dlang-community/setup-dlang@v2
        with:
          compiler: ${{ matrix.compiler }}

      - name: Build (Windows arm64)
        if: matrix.os == 'windows-arm64'
        run: |
          $vsPath = vswhere -property installationPath
          cmd /c "`"$vsPath\Common7\Tools\VsDevCmd.bat`" -arch=arm64 -host_arch=x64 && dub build -v --build=release-debug --arch=aarch64-windows-msvc"

      - name: Build (Other)
        if: matrix.os != 'windows-arm64'
        run: dub build -v --build=release-debug --config=${{ matrix.config }}

      - name: Run tests
        run: dub test

      - name: Sign binaries (macOS)
        if: runner.os == 'macOS'
        run: codesign -s - bin/*

      - name: Archive artifacts
        if: matrix.compiler == 'ldc'
        uses: actions/upload-artifact@v4
        with:
          name: soulfind-${{ matrix.os }}
          path: |
            bin
            !bin/*test*

  release:
    needs: build
    if: github.repository == 'soulfind-dev/soulfind' && github.ref == 'refs/heads/master'
    runs-on: ubuntu-latest
    timeout-minutes: 15
    permissions:
      contents: write
    env:
      GITHUB_TOKEN: ${{ github.token }}
      TAG_NAME: latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Download artifacts
        uses: actions/download-artifact@v4
        with:
          path: dist/

      - name: Zip artifacts
        run: |
          cd dist/
          for dir in *; do
            [ -f "$dir/soulfind" ] && chmod +x "$dir/soulfind"
            [ -f "$dir/soulsetup" ] && chmod +x "$dir/soulsetup"
            (cd "$dir" && zip -r "../$dir.zip" .)
          done

      - name: Create release
        run: |
          gh release delete "$TAG_NAME" --cleanup-tag || true
          gh release create "$TAG_NAME" --title "$TAG_NAME" dist/*.zip
